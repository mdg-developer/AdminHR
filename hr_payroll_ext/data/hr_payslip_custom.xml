<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <record id="structure_office_staff_new" model="hr.payroll.structure">
            <field name="name">ST01</field>
            <field name="description">Office</field>
            <field name="remark"></field>
            <field name="type_id" ref="hr_payroll_ext.payroll_structure_type_employee"/>
            <field name="regular_pay" eval="True"/>
            <field name="unpaid_work_entry_type_ids" eval="[(4, ref('hr_payroll.work_entry_type_unpaid_leave'))]"/>
            <field name="country_id" eval="False"/>
        </record>

        <record id="input_type_security_allowance" model="hr.payslip.input.type">
            <field name="name">Security Allowance</field>
            <field name="code">SW</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="input_type_car_allowance" model="hr.payslip.input.type">
            <field name="name">Car Accommodation Allowance</field>
            <field name="code">CAW</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_sw" model="hr.salary.rule">
            <field name="name">Security Allowance</field>
            <field name="code">SW</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.SW and inputs.SW.amount
            </field>
        </record>

        <record id="hr_salary_rule_worker_basic_sale_achievement" model="hr.salary.rule">
            <field name="name">Basic Sale</field>
            <field name="code">BASICS</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
calendar_days = payslip.days_of_month
salary = contract.wage
if payslip.sale_achievement:
    attendance_day = worked_days.WORK100 and worked_days.WORK100.number_of_days or 0
    working_day = payslip.working_day or 0
    if payslip.sale_achievement >= 85:
        salary = (contract.wage / working_day) * attendance_day
    elif payslip.sale_achievement >= 80:
        salary = ((contract.wage * 0.90) / working_day) * attendance_day
    elif payslip.sale_achievement >= 70 and contract.wage > 300000:
        salary = ((contract.wage * 0.80) / working_day) * attendance_day
    elif payslip.sale_achievement >= 70 and 300000 >= contract.wage:
        salary = ((contract.wage * 0.85) / working_day) * attendance_day
    elif 70 > payslip.sale_achievement  and contract.wage > 300000:
        salary = ((contract.wage * 0.70) / working_day) * attendance_day
    elif 70 > payslip.sale_achievement  and 300000 >= contract.wage:
        salary = ((contract.wage * 0.80) / working_day) * attendance_day
    result = salary
result = salary
            </field>
        </record>

        <record id="input_type_car_allowance" model="hr.payslip.input.type">
            <field name="name">Car Accommodation Allowance</field>
            <field name="code">CAW</field>
            <field name="country_id" eval="False"/>
        </record>

         <record id="office_staff_car_allowance" model="hr.salary.rule">
            <field name="name">Car Accommodation Allowance</field>
            <field name="code">CAW</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.CAW and inputs.CAW.amount
            </field>
        </record>

        <record id="input_type_attendance_allowance" model="hr.payslip.input.type">
            <field name="name">Attendance Allowance</field>
            <field name="code">ATT</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_attendance_allowance" model="hr.salary.rule">
            <field name="name">Attendance Allowance</field>
            <field name="code">ATT</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = contract.attendance_allowance
            </field>
        </record>

        <record id="input_type_Meal_allowance" model="hr.payslip.input.type">
            <field name="name">Meal Allowance</field>
            <field name="code">Meal</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_meal_allowance" model="hr.salary.rule">
            <field name="name">Meal Allowance</field>
            <field name="code">Meal</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = contract.meal_allowance
            </field>
        </record>

        <record id="input_type_driving_allowance" model="hr.payslip.input.type">
            <field name="name">Driving Allowance</field>
            <field name="code">Driving</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_driving_allowance" model="hr.salary.rule">
            <field name="name">Driving Allowance</field>
            <field name="code">Driving</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.Driving and inputs.Driving.amount
            </field>
        </record>

        <record id="input_type_travle_allowance" model="hr.payslip.input.type">
            <field name="name">Travelling Allowance</field>
            <field name="code">Travel</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_travelling_allowance" model="hr.salary.rule">
            <field name="name">Travelling Allowance</field>
            <field name="code">Travel</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = contract.traveling_allowance * payslip.travel_day or 0
            </field>
        </record>

         <record id="office_staff_car_deduction" model="hr.salary.rule">
            <field name="name">>Car Accommodation Deduction</field>
            <field name="code">CAD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.CAD and inputs.CAD.amount
            </field>
        </record>

        <record id="office_staff_sale_cheating_deduction" model="hr.salary.rule">
            <field name="name">Sale Cheating Deduction</field>
            <field name="code">SCD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
if payslip.sale_achievement:
    result = contract.wage * 0.30
else:
    result = 0
            </field>
        </record>

        <record id="office_staff_wfh_deduction" model="hr.salary.rule">
            <field name="name">Work From Home Deduction</field>
            <field name="code">WFHD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
calendar_days = payslip.days_of_month
salary = contract.wage
if payslip.sale_achievement:
    attendance_day = worked_days.WORK100 and worked_days.WORK100.number_of_days or 0
    working_day = payslip.working_day or 0
    if payslip.sale_achievement >= 85:
        salary = (contract.wage / working_day)
    elif payslip.sale_achievement >= 80:
        salary = ((contract.wage * 0.90) / working_day)
    elif payslip.sale_achievement >= 70 and contract.wage > 300000:
        salary = ((contract.wage * 0.80) / working_day)
    elif payslip.sale_achievement >= 70 and 300000 >= contract.wage:
        salary = ((contract.wage * 0.85) / working_day)
    elif 70 > payslip.sale_achievement  and contract.wage > 300000:
        salary = ((contract.wage * 0.70) / working_day)
    elif 70 > payslip.sale_achievement  and 300000 >= contract.wage:
        salary = ((contract.wage * 0.80) / working_day)

if payslip.wfh_day > 0:
    result =  salary * 0.80 * payslip.wfh_day * 0.30
else:
    result = 0
            </field>
        </record>

         <record id="input_type_car_deduction" model="hr.payslip.input.type">
            <field name="name">Car Accommodation Deduction</field>
            <field name="code">CAD</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_car_deduction" model="hr.salary.rule">
            <field name="name">Car Accommodation Deduction</field>
            <field name="code">CAD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.CAD and inputs.CAD.amount
            </field>
        </record>

         <record id="input_type_attendance_deduction" model="hr.payslip.input.type">
            <field name="name">Attendance Deduction</field>
            <field name="code">ATTD</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_attendance_deduction" model="hr.salary.rule">
            <field name="name">Attendance Deduction</field>
            <field name="code">ATTD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.ATTD and inputs.ATTD.amount
            </field>
        </record>

        <record id="input_type_meal_deduction" model="hr.payslip.input.type">
            <field name="name">Meal Deduction</field>
            <field name="code">MealD</field>
            <field name="country_id" eval="False"/>
        </record>

        <record id="office_staff_Meal_deduction" model="hr.salary.rule">
            <field name="name">Meal Deduction</field>
            <field name="code">MealD</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = inputs.MealD and inputs.MealD.amount
            </field>
        </record>

        <record id="office_staff_SSB_new" model="hr.salary.rule">
            <field name="name">SSB</field>
            <field name="code">SSB</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = contract.wage * 0.02
if employee.ssb_not_calculate:
    result = 0
elif abs(result) > 6000:
    result = 6000
            </field>
        </record>

         <record id="office_staff_ICT" model="hr.salary.rule">
            <field name="name">Income Tax</field>
            <field name="code">ICT</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="struct_id" ref="hr_payroll_ext.structure_office_staff_new"/>
            <field name="condition_select">none</field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
result = payable_tax = 0
remaining_months = payslip.remaining_months
if contract.wage &gt; 400000:
    ssb_amount = contract.wage * 0.02
    if employee.ssb_not_calculate:
        ssb_amount = 0
    elif abs(ssb_amount) > 6000:
        ssb_amount = 6000

    income_amt = categories.BASIC
    unpaid_leaves_amt = categories.LDED
    this_month_income = income_amt - unpaid_leaves_amt
    remaining_month_income = (remaining_months * contract.wage) - remaining_months
    actual_annual_income = payslip.previous_income + this_month_income + remaining_month_income

    twenty_percent_exemption = actual_annual_income * 0.2
    if twenty_percent_exemption &lt;= 10000000:
        twenty_percent_exemption = twenty_percent_exemption
    else:
        twenty_percent_exemption = 10000000

    if actual_annual_income > 4800000:
        family_exemption = 0
        if employee.spouse_exemption:
            family_exemption += 1000000
        if employee.father_exemption:
            family_exemption += 1000000
        if employee.mother_exemption:
            family_exemption += 1000000
        if employee.children > 0:
            family_exemption += employee.children * 500000
        taxable_income = actual_annual_income - family_exemption - twenty_percent_exemption - ((remaining_months + 1) * ssb_amount)

    # For 0 to 2,000,000 Kyats == 0%
        if taxable_income > 2000000:

    # For 2,000,001 to 5,000,000 Kyats == 5%
            if taxable_income &lt;= 5000000:
                payable_tax += (taxable_income - 2000000) * 0.05;
            if taxable_income > 5000000:
                payable_tax += (5000000 - 2000000) * 0.05;

    # For 5,000,001 to 10,000,000 Kyats == 10%
                if taxable_income &lt;= 10000000:
                    payable_tax += (taxable_income - 5000000 ) * 0.10;
                if taxable_income > 10000000:
                    payable_tax += (10000000 - 5000000 ) * 0.10;

    # For 10,000,001 to 20,000,000 Kyats == 15%
                    if taxable_income &lt;= 20000000:
                        payable_tax += (taxable_income - 10000000) * 0.15;
                    if taxable_income > 20000000:
                        payable_tax += (20000000 - 10000000) * 0.15;

    # For 20,000,001 to 30,000,000 Kyats == 20%
                        if taxable_income &lt;= 30000000:
                            payable_tax += (taxable_income - 20000000 ) * 0.20;
                        if taxable_income > 30000000:
                            payable_tax += (30000000 - 20000000 ) * 0.20;

    # For 30,000,001 Kyats and Up == 25%
                            payable_tax += (taxable_income - 30000000 ) * 0.25;

    payable_tax = payable_tax - payslip.previous_tax_paid
    result = payable_tax / (remaining_months + 1)
if result &lt; 0:
    result = 0
result = round(result)
            </field>
        </record>

    </data>
</odoo>